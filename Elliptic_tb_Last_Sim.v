// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/FILTER/Elliptic_tb.v
// Created: 2020-11-15 21:01:19
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 5e-05
// Target subsystem base rate: 5e-05
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        5e-05
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Output_rsvd                   	         5e-05
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Elliptic_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Elliptic_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire Output_rsvd_done;  // ufix1
  wire rdEnb;
  wire Output_rsvd_done_enb;  // ufix1
  reg [15:0] Output_rsvd_addr;  // ufix16
  wire Output_rsvd_active;  // ufix1
  reg [15:0] Signal_From_Workspace_out1_addr;  // ufix16
  wire Signal_From_Workspace_out1_active;  // ufix1
  reg  tb_enb_delay;
  wire Signal_From_Workspace_out1_enb;  // ufix1
  wire [15:0] Signal_From_Workspace_out1_addr_delay_1;  // ufix16
  reg signed [31:0] fp_Input_rsvd;  // sfix32
  reg signed [14:0] rawData_Input_rsvd;  // sfix15_En4
  reg signed [31:0] status_Input_rsvd;  // sfix32
  reg signed [14:0] holdData_Input_rsvd;  // sfix15_En4
  reg signed [14:0] Input_rsvd_offset;  // sfix15_En4
  wire signed [14:0] Input_rsvd;  // sfix15_En4
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire signed [14:0] Output_rsvd;  // sfix15_En4
  wire Output_rsvd_enb;  // ufix1
  wire Output_rsvd_lastAddr;  // ufix1
  wire [15:0] Output_rsvd_addr_delay_1;  // ufix16
  reg signed [31:0] fp_Output_rsvd_expected;  // sfix32
  reg signed [14:0] Output_rsvd_expected;  // sfix15_En4
  reg signed [14:0] Output_rsvd_expected_1; 
  reg signed [14:0] Output_rsvd_expected_2; 
  reg signed [31:0] status_Output_rsvd_expected;  // sfix32
  wire signed [14:0] Output_rsvd_ref;  // sfix15_En4
  reg  Output_rsvd_testFailure;  // ufix1
  wire testFailure;  // ufix1




  assign Output_rsvd_done_enb = Output_rsvd_done & rdEnb;



  assign Output_rsvd_active = Output_rsvd_addr != 16'b1001110001000000;



  assign Signal_From_Workspace_out1_active = Signal_From_Workspace_out1_addr != 16'b1001110001000000;



  assign Signal_From_Workspace_out1_enb = Signal_From_Workspace_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 40000
  always @(posedge clk or posedge reset)
    begin : SignalFromWorkspace_process
      if (reset == 1'b1) begin
        Signal_From_Workspace_out1_addr <= 16'b0000000000000000;
      end
      else begin
        if (Signal_From_Workspace_out1_enb) begin
          if (Signal_From_Workspace_out1_addr >= 16'b1001110001000000) begin
            Signal_From_Workspace_out1_addr <= 16'b0000000000000000;
          end
          else begin
            Signal_From_Workspace_out1_addr <= Signal_From_Workspace_out1_addr + 16'b0000000000000001;
          end
        end
      end
    end



  assign #1 Signal_From_Workspace_out1_addr_delay_1 = Signal_From_Workspace_out1_addr;

  // Data source for Input_rsvd
  initial
    begin : Input_rsvd_fileread
      fp_Input_rsvd = $fopen("Input_rsvd.dat", "r");
      status_Input_rsvd = $rewind(fp_Input_rsvd);
    end

  always @(Signal_From_Workspace_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_Input_rsvd <= 15'bx;
      end
      else if (rdEnb == 1) begin
        status_Input_rsvd = $fscanf(fp_Input_rsvd, "%h", rawData_Input_rsvd);
      end
    end

  // holdData reg for Signal_From_Workspace_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Signal_From_Workspace_out1
      if (reset) begin
        holdData_Input_rsvd <= 15'bx;
      end
      else begin
        holdData_Input_rsvd <= rawData_Input_rsvd;
      end
    end

  always @(rawData_Input_rsvd or rdEnb)
    begin : stimuli_Signal_From_Workspace_out1_1
      if (rdEnb == 1'b0) begin
        Input_rsvd_offset <= holdData_Input_rsvd;
      end
      else begin
        Input_rsvd_offset <= rawData_Input_rsvd;
      end
    end

  assign #2 Input_rsvd = Input_rsvd_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (check1_done == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (34);
      clk <= 1'b0;
      # (34);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (34);
        clk <= 1'b0;
        # (34);
        $stop;
      end
    end

  Elliptic u_Elliptic (.clk(clk),
                       .reset(reset),
                       .clk_enable(clk_enable),
                       .Input_rsvd(Input_rsvd),  // sfix15_En4
                       .Output_rsvd(Output_rsvd)  // sfix15_En4
                       );


initial
$sdf_annotate("../Outputs/Elleptic_MAX.sdf", u_Elliptic);

  assign Output_rsvd_enb = clk_enable & Output_rsvd_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 40000
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        Output_rsvd_addr <= 16'b0000000000000000;
      end
      else begin
        if (Output_rsvd_enb) begin
          if (Output_rsvd_addr >= 16'b1001110001000000) begin
            Output_rsvd_addr <= 16'b0000000000000000;
          end
          else begin
            Output_rsvd_addr <= Output_rsvd_addr + 16'b0000000000000001;
          end
        end
      end
    end



  assign Output_rsvd_lastAddr = Output_rsvd_addr >= 16'b1001110001000000;



  assign Output_rsvd_done = Output_rsvd_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (Output_rsvd_done_enb) begin
          check1_done <= Output_rsvd_done;
        end
      end
    end

  assign #1 Output_rsvd_addr_delay_1 = Output_rsvd_addr;

  // Data source for Output_rsvd_expected
  initial
    begin : Output_rsvd_expected_fileread
      fp_Output_rsvd_expected = $fopen("Output_rsvd_expected.dat", "r");
      status_Output_rsvd_expected = $rewind(fp_Output_rsvd_expected);
    end

  always @(Output_rsvd_addr_delay_1, clk_enable, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Output_rsvd_expected <= 15'b0;
      end
      else if (clk_enable == 1) begin
        status_Output_rsvd_expected = $fscanf(fp_Output_rsvd_expected, "%h", Output_rsvd_expected);
      end
    end

always @(posedge clk)
begin
Output_rsvd_expected_1 <= Output_rsvd_expected;
Output_rsvd_expected_2 <= Output_rsvd_expected_1;
end

  assign Output_rsvd_ref = Output_rsvd_expected_2;

  always @(posedge clk or posedge reset)
    begin : Output_rsvd_checker
      if (reset == 1'b1) begin
        Output_rsvd_testFailure <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1 && Output_rsvd !== Output_rsvd_ref) begin
          Output_rsvd_testFailure <= 1'b1;
          $display("ERROR in Output_rsvd at time %t : Expected '%h' Actual '%h'", $time, Output_rsvd_ref, Output_rsvd);
        end
      end
    end

  assign testFailure = Output_rsvd_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // Elliptic_tb
