// -------------------------------------------------------------
// 
// File Name: /home/student13/Khabibullin_BA/Digital_ASIC/NEW_SEM/FILTER/Elliptic.v
// Created: 2020-11-05 22:15:21
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 5e-05
// Target subsystem base rate: 5e-05
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        5e-05
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Output_rsvd                   ce_out        5e-05
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------

// -------------------------------------------------------------
// 
// Module: Elliptic
// Source Path: FILTER/Elliptic
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Elliptic
          (clk,
           reset,
           clk_enable,
           Input_rsvd,
           Output_rsvd);

  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [14:0] Input_rsvd;  // sfix15_En4
  output  signed [14:0] Output_rsvd;  // sfix15_En4

  reg  signed [14:0] Input_rsvd_REG;
  wire signed [32:0] s_1_mul_temp;  // sfix33_En21
  wire signed [31:0] s_1_cast;  // sfix32_En21
  wire signed [20:0] s_1_out1;  // sfix21_En13
  reg signed [29:0] Delay11_out1;  // sfix30_En16
  reg signed [29:0] Delay21_out1;  // sfix30_En16
  wire signed [51:0] a_3_1_mul_temp;  // sfix52_En37
  wire signed [50:0] a_3_1_cast;  // sfix51_En37
  wire signed [29:0] a_3_1_out1;  // sfix30_En16
  wire signed [29:0] SumA31_out1;  // sfix30_En16
  wire signed [51:0] a_2_1_mul_temp;  // sfix52_En36
  wire signed [50:0] a_2_1_cast;  // sfix51_En36
  wire signed [28:0] a_2_1_out1;  // sfix29_En14
  wire signed [28:0] SumA21_sub_cast;  // sfix29_En14
  wire signed [29:0] SumA21_sub_cast_1;  // sfix30_En14
  wire signed [29:0] SumA21_sub_cast_2;  // sfix30_En14
  wire signed [29:0] SumA21_sub_temp;  // sfix30_En14
  wire signed [28:0] SumA21_out1;  // sfix29_En14
  wire signed [31:0] SumA31_sub_cast;  // sfix32_En16
  wire signed [30:0] SumA31_sub_cast_1;  // sfix31_En16
  wire signed [31:0] SumA31_sub_cast_2;  // sfix32_En16
  wire signed [31:0] SumA31_sub_temp;  // sfix32_En16
  wire signed [30:0] SumA31_cast;  // sfix31_En16
  wire signed [51:0] b_2_1_mul_temp;  // sfix52_En36
  wire signed [50:0] b_2_1_cast;  // sfix51_En36
  wire signed [27:0] b_2_1_out1;  // sfix28_En13
  wire signed [27:0] SumB21_add_cast;  // sfix28_En13
  wire signed [28:0] SumB21_add_cast_1;  // sfix29_En13
  wire signed [28:0] SumB21_add_cast_2;  // sfix29_En13
  wire signed [28:0] SumB21_add_temp;  // sfix29_En13
  wire signed [27:0] SumB21_cast;  // sfix28_En13
  wire signed [25:0] SumB21_out1;  // sfix26_En13
  wire signed [26:0] SumB31_add_cast;  // sfix27_En13
  wire signed [27:0] SumB31_add_cast_1;  // sfix28_En13
  wire signed [26:0] SumB31_add_cast_2;  // sfix27_En13
  wire signed [27:0] SumB31_add_cast_3;  // sfix28_En13
  wire signed [27:0] SumB31_add_temp;  // sfix28_En13
  wire signed [26:0] SumB31_cast;  // sfix27_En13
  wire signed [23:0] SumB31_out1;  // sfix24_En12
  wire signed [44:0] s_2_mul_temp;  // sfix45_En32
  wire signed [43:0] s_2_cast;  // sfix44_En32
  wire signed [24:0] s_2_out1;  // sfix25_En17
  reg signed [27:0] Delay12_out1;  // sfix28_En16
  reg signed [27:0] Delay22_out1;  // sfix28_En16
  wire signed [48:0] a_3_2_mul_temp;  // sfix49_En36
  wire signed [47:0] a_3_2_cast;  // sfix48_En36
  wire signed [27:0] a_3_2_out1;  // sfix28_En16
  wire signed [27:0] SumA32_out1;  // sfix28_En16
  wire signed [47:0] a_2_2_mul_temp;  // sfix48_En34
  wire signed [46:0] a_2_2_cast;  // sfix47_En34
  wire signed [29:0] a_2_2_out1;  // sfix30_En17
  wire signed [28:0] SumA22_sub_cast;  // sfix29_En16
  wire signed [29:0] SumA22_sub_cast_1;  // sfix30_En16
  wire signed [28:0] SumA22_sub_cast_2;  // sfix29_En16
  wire signed [29:0] SumA22_sub_cast_3;  // sfix30_En16
  wire signed [29:0] SumA22_sub_temp;  // sfix30_En16
  wire signed [28:0] SumA22_out1;  // sfix29_En16
  wire signed [29:0] SumA32_sub_cast;  // sfix30_En16
  wire signed [28:0] SumA32_sub_cast_1;  // sfix29_En16
  wire signed [29:0] SumA32_sub_cast_2;  // sfix30_En16
  wire signed [29:0] SumA32_sub_temp;  // sfix30_En16
  wire signed [28:0] SumA32_cast;  // sfix29_En16
  wire signed [47:0] b_2_2_mul_temp;  // sfix48_En34
  wire signed [46:0] b_2_2_cast;  // sfix47_En34
  wire signed [24:0] b_2_2_out1;  // sfix25_En13
  wire signed [24:0] SumB22_add_cast;  // sfix25_En13
  wire signed [25:0] SumB22_add_cast_1;  // sfix26_En13
  wire signed [25:0] SumB22_add_cast_2;  // sfix26_En13
  wire signed [25:0] SumB22_add_temp;  // sfix26_En13
  wire signed [24:0] SumB22_cast;  // sfix25_En13
  wire signed [22:0] SumB22_out1;  // sfix23_En13
  wire signed [25:0] SumB32_add_cast;  // sfix26_En14
  wire signed [26:0] SumB32_add_cast_1;  // sfix27_En14
  wire signed [25:0] SumB32_add_cast_2;  // sfix26_En14
  wire signed [26:0] SumB32_add_cast_3;  // sfix27_En14
  wire signed [26:0] SumB32_add_temp;  // sfix27_En14
  wire signed [25:0] SumB32_cast;  // sfix26_En14
  wire signed [24:0] SumB32_out1;  // sfix25_En13
  wire signed [42:0] s_3_mul_temp;  // sfix43_En30
  wire signed [41:0] s_3_cast;  // sfix42_En30
  wire signed [25:0] s_3_out1;  // sfix26_En17
  wire signed [24:0] SumA23_out1;  // sfix25_En15
  reg signed [24:0] Delay13_out1;  // sfix25_En15
  wire signed [44:0] a_2_3_mul_temp;  // sfix45_En34
  wire signed [43:0] a_2_3_cast;  // sfix44_En34
  wire signed [25:0] a_2_3_out1;  // sfix26_En16
  wire signed [25:0] SumA23_sub_cast;  // sfix26_En16
  wire signed [26:0] SumA23_sub_cast_1;  // sfix27_En16
  wire signed [26:0] SumA23_sub_cast_2;  // sfix27_En16
  wire signed [26:0] SumA23_sub_temp;  // sfix27_En16
  wire signed [25:0] SumA23_cast;  // sfix26_En16
  wire signed [24:0] SumB23_sub_cast;  // sfix25_En14
  wire signed [24:0] SumB23_sub_cast_1;  // sfix25_En14
  wire signed [24:0] SumB23_sub_temp;  // sfix25_En14
  wire signed [14:0] SumB23_out1;  // sfix15_En4
  reg signed [14:0] SumB23_out;

always @(posedge clk or posedge reset)
    begin 
      if (reset == 1'b1) begin
        Input_rsvd_REG <= 15'sb00000_00000_00000;
	SumB23_out <= 15'sb00000_00000_00000;
      end
      else begin
        if (clk_enable) begin
    Input_rsvd_REG <= Input_rsvd;
    SumB23_out <= SumB23_out1;
        end
      end
    end

  assign s_1_mul_temp = 18'sb000011100010011001 * Input_rsvd_REG;
  assign s_1_cast = s_1_mul_temp[31:0];
  assign s_1_out1 = (((s_1_cast[31] == 1'b0) && (s_1_cast[30:28] != 3'b000)) || ((s_1_cast[31] == 1'b0) && (s_1_cast[28:8] == 21'sb011111111111111111111)) ? 21'sb011111111111111111111 :
              ((s_1_cast[31] == 1'b1) && (s_1_cast[30:28] != 3'b111) ? 21'sb100000000000000000000 :
              s_1_cast[28:8] + $signed({1'b0, s_1_cast[7]})));



  always @(posedge clk or posedge reset)
    begin : Delay21_process
      if (reset == 1'b1) begin
        Delay21_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (clk_enable) begin
          Delay21_out1 <= Delay11_out1;
        end
      end
    end


  assign a_3_1_mul_temp = 22'sb0111011110000111000101 * Delay21_out1;
  assign a_3_1_cast = a_3_1_mul_temp[50:0];
  assign a_3_1_out1 = ((a_3_1_cast[50] == 1'b0) && (a_3_1_cast[49:21] == 29'b11111111111111111111111111111) ? 30'sb011111111111111111111111111111 :
              a_3_1_cast[50:21] + $signed({1'b0, a_3_1_cast[20]}));


  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (clk_enable) begin
          Delay11_out1 <= SumA31_out1;
        end
      end
    end


  assign a_2_1_mul_temp = 22'sb0111010101001000001111 * Delay11_out1;
  assign a_2_1_cast = a_2_1_mul_temp[50:0];
  assign a_2_1_out1 = ((a_2_1_cast[50] == 1'b0) && (a_2_1_cast[49:22] == 28'b1111111111111111111111111111) ? 29'sb01111111111111111111111111111 :
              a_2_1_cast[50:22] + $signed({1'b0, a_2_1_cast[21]}));


  assign SumA21_sub_cast = {{7{s_1_out1[20]}}, {s_1_out1, 1'b0}};
  assign SumA21_sub_cast_1 = {SumA21_sub_cast[28], SumA21_sub_cast};
  assign SumA21_sub_cast_2 = {a_2_1_out1[28], a_2_1_out1};
  assign SumA21_sub_temp = SumA21_sub_cast_1 - SumA21_sub_cast_2;
  assign SumA21_out1 = ((SumA21_sub_temp[29] == 1'b0) && (SumA21_sub_temp[28] != 1'b0) ? 29'sb01111111111111111111111111111 :
              ((SumA21_sub_temp[29] == 1'b1) && (SumA21_sub_temp[28] != 1'b1) ? 29'sb10000000000000000000000000000 :
              $signed(SumA21_sub_temp[28:0])));


  assign SumA31_sub_cast = {SumA21_out1[28], {SumA21_out1, 2'b00}};
  assign SumA31_sub_cast_1 = {a_3_1_out1[29], a_3_1_out1};
  assign SumA31_sub_cast_2 = {SumA31_sub_cast_1[30], SumA31_sub_cast_1};
  assign SumA31_sub_temp = SumA31_sub_cast - SumA31_sub_cast_2;
  assign SumA31_cast = ((SumA31_sub_temp[31] == 1'b0) && (SumA31_sub_temp[30] != 1'b0) ? 31'sb0111111111111111111111111111111 :
              ((SumA31_sub_temp[31] == 1'b1) && (SumA31_sub_temp[30] != 1'b1) ? 31'sb1000000000000000000000000000000 :
              $signed(SumA31_sub_temp[30:0])));
  assign SumA31_out1 = ((SumA31_cast[30] == 1'b0) && (SumA31_cast[29] != 1'b0) ? 30'sb011111111111111111111111111111 :
              ((SumA31_cast[30] == 1'b1) && (SumA31_cast[29] != 1'b1) ? 30'sb100000000000000000000000000000 :
              $signed(SumA31_cast[29:0])));


  assign b_2_1_mul_temp = 22'sb0110010110001001100101 * Delay11_out1;
  assign b_2_1_cast = b_2_1_mul_temp[50:0];
  assign b_2_1_out1 = ((b_2_1_cast[50] == 1'b0) && (b_2_1_cast[49:23] == 27'b111111111111111111111111111) ? 28'sb0111111111111111111111111111 :
              b_2_1_cast[50:23] + $signed({1'b0, b_2_1_cast[22]}));


  assign SumB21_add_cast = ({SumA31_out1[29], SumA31_out1[29:3]}) + $signed({1'b0, SumA31_out1[2]});
  assign SumB21_add_cast_1 = {SumB21_add_cast[27], SumB21_add_cast};
  assign SumB21_add_cast_2 = {b_2_1_out1[27], b_2_1_out1};
  assign SumB21_add_temp = SumB21_add_cast_1 + SumB21_add_cast_2;
  assign SumB21_cast = ((SumB21_add_temp[28] == 1'b0) && (SumB21_add_temp[27] != 1'b0) ? 28'sb0111111111111111111111111111 :
              ((SumB21_add_temp[28] == 1'b1) && (SumB21_add_temp[27] != 1'b1) ? 28'sb1000000000000000000000000000 :
              $signed(SumB21_add_temp[27:0])));
  assign SumB21_out1 = ((SumB21_cast[27] == 1'b0) && (SumB21_cast[26:25] != 2'b00) ? 26'sb01111111111111111111111111 :
              ((SumB21_cast[27] == 1'b1) && (SumB21_cast[26:25] != 2'b11) ? 26'sb10000000000000000000000000 :
              $signed(SumB21_cast[25:0])));


  assign SumB31_add_cast = {SumB21_out1[25], SumB21_out1};
  assign SumB31_add_cast_1 = {SumB31_add_cast[26], SumB31_add_cast};
  assign SumB31_add_cast_2 = ((Delay21_out1[29] == 1'b0) && (Delay21_out1[28:3] == 26'b11111111111111111111111111) ? 27'sb011111111111111111111111111 :
              Delay21_out1[29:3] + $signed({1'b0, Delay21_out1[2]}));
  assign SumB31_add_cast_3 = {SumB31_add_cast_2[26], SumB31_add_cast_2};
  assign SumB31_add_temp = SumB31_add_cast_1 + SumB31_add_cast_3;
  assign SumB31_cast = ((SumB31_add_temp[27] == 1'b0) && (SumB31_add_temp[26] != 1'b0) ? 27'sb011111111111111111111111111 :
              ((SumB31_add_temp[27] == 1'b1) && (SumB31_add_temp[26] != 1'b1) ? 27'sb100000000000000000000000000 :
              $signed(SumB31_add_temp[26:0])));
  assign SumB31_out1 = (((SumB31_cast[26] == 1'b0) && (SumB31_cast[25:24] != 2'b00)) || ((SumB31_cast[26] == 1'b0) && (SumB31_cast[24:1] == 24'sb011111111111111111111111)) ? 24'sb011111111111111111111111 :
              ((SumB31_cast[26] == 1'b1) && (SumB31_cast[25:24] != 2'b11) ? 24'sb100000000000000000000000 :
              SumB31_cast[24:1] + $signed({1'b0, SumB31_cast[0]})));


  assign s_2_mul_temp = 21'sb000001110111011000111 * SumB31_out1;
  assign s_2_cast = s_2_mul_temp[43:0];
  assign s_2_out1 = (((s_2_cast[43] == 1'b0) && (s_2_cast[42:39] != 4'b0000)) || ((s_2_cast[43] == 1'b0) && (s_2_cast[39:15] == 25'sb0111111111111111111111111)) ? 25'sb0111111111111111111111111 :
              ((s_2_cast[43] == 1'b1) && (s_2_cast[42:39] != 4'b1111) ? 25'sb1000000000000000000000000 :
              s_2_cast[39:15] + $signed({1'b0, s_2_cast[14]})));


  always @(posedge clk or posedge reset)
    begin : Delay22_process
      if (reset == 1'b1) begin
        Delay22_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (clk_enable) begin
          Delay22_out1 <= Delay12_out1;
        end
      end
    end


  assign a_3_2_mul_temp = 21'sb011001111101001011011 * Delay22_out1;
  assign a_3_2_cast = a_3_2_mul_temp[47:0];
  assign a_3_2_out1 = ((a_3_2_cast[47] == 1'b0) && (a_3_2_cast[46:20] == 27'b111111111111111111111111111) ? 28'sb0111111111111111111111111111 :
              a_3_2_cast[47:20] + $signed({1'b0, a_3_2_cast[19]}));


  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (clk_enable) begin
          Delay12_out1 <= SumA32_out1;
        end
      end
    end


  assign a_2_2_mul_temp = 20'sb01110000101001001111 * Delay12_out1;
  assign a_2_2_cast = a_2_2_mul_temp[46:0];
  assign a_2_2_out1 = ((a_2_2_cast[46] == 1'b0) && (a_2_2_cast[45:17] == 29'b11111111111111111111111111111) ? 30'sb011111111111111111111111111111 :
              a_2_2_cast[46:17] + $signed({1'b0, a_2_2_cast[16]}));


  assign SumA22_sub_cast = ({{5{s_2_out1[24]}}, s_2_out1[24:1]}) + $signed({1'b0, s_2_out1[0]});
  assign SumA22_sub_cast_1 = {SumA22_sub_cast[28], SumA22_sub_cast};
  assign SumA22_sub_cast_2 = ((a_2_2_out1[29] == 1'b0) && (a_2_2_out1[28:1] == 28'b1111111111111111111111111111) ? 29'sb01111111111111111111111111111 :
              a_2_2_out1[29:1] + $signed({1'b0, a_2_2_out1[0]}));
  assign SumA22_sub_cast_3 = {SumA22_sub_cast_2[28], SumA22_sub_cast_2};
  assign SumA22_sub_temp = SumA22_sub_cast_1 - SumA22_sub_cast_3;
  assign SumA22_out1 = ((SumA22_sub_temp[29] == 1'b0) && (SumA22_sub_temp[28] != 1'b0) ? 29'sb01111111111111111111111111111 :
              ((SumA22_sub_temp[29] == 1'b1) && (SumA22_sub_temp[28] != 1'b1) ? 29'sb10000000000000000000000000000 :
              $signed(SumA22_sub_temp[28:0])));


  assign SumA32_sub_cast = {SumA22_out1[28], SumA22_out1};
  assign SumA32_sub_cast_1 = {a_3_2_out1[27], a_3_2_out1};
  assign SumA32_sub_cast_2 = {SumA32_sub_cast_1[28], SumA32_sub_cast_1};
  assign SumA32_sub_temp = SumA32_sub_cast - SumA32_sub_cast_2;
  assign SumA32_cast = ((SumA32_sub_temp[29] == 1'b0) && (SumA32_sub_temp[28] != 1'b0) ? 29'sb01111111111111111111111111111 :
              ((SumA32_sub_temp[29] == 1'b1) && (SumA32_sub_temp[28] != 1'b1) ? 29'sb10000000000000000000000000000 :
              $signed(SumA32_sub_temp[28:0])));
  assign SumA32_out1 = ((SumA32_cast[28] == 1'b0) && (SumA32_cast[27] != 1'b0) ? 28'sb0111111111111111111111111111 :
              ((SumA32_cast[28] == 1'b1) && (SumA32_cast[27] != 1'b1) ? 28'sb1000000000000000000000000000 :
              $signed(SumA32_cast[27:0])));


  assign b_2_2_mul_temp = 20'sb01000111111100101111 * Delay12_out1;
  assign b_2_2_cast = b_2_2_mul_temp[46:0];
  assign b_2_2_out1 = (((b_2_2_cast[46] == 1'b0) && (b_2_2_cast[45] != 1'b0)) || ((b_2_2_cast[46] == 1'b0) && (b_2_2_cast[45:21] == 25'sb0111111111111111111111111)) ? 25'sb0111111111111111111111111 :
              ((b_2_2_cast[46] == 1'b1) && (b_2_2_cast[45] != 1'b1) ? 25'sb1000000000000000000000000 :
              b_2_2_cast[45:21] + $signed({1'b0, b_2_2_cast[20]})));


  assign SumB22_add_cast = ((SumA32_out1[27] == 1'b0) && (SumA32_out1[26:3] == 24'b111111111111111111111111) ? 25'sb0111111111111111111111111 :
              SumA32_out1[27:3] + $signed({1'b0, SumA32_out1[2]}));
  assign SumB22_add_cast_1 = {SumB22_add_cast[24], SumB22_add_cast};
  assign SumB22_add_cast_2 = {b_2_2_out1[24], b_2_2_out1};
  assign SumB22_add_temp = SumB22_add_cast_1 + SumB22_add_cast_2;
  assign SumB22_cast = ((SumB22_add_temp[25] == 1'b0) && (SumB22_add_temp[24] != 1'b0) ? 25'sb0111111111111111111111111 :
              ((SumB22_add_temp[25] == 1'b1) && (SumB22_add_temp[24] != 1'b1) ? 25'sb1000000000000000000000000 :
              $signed(SumB22_add_temp[24:0])));
  assign SumB22_out1 = ((SumB22_cast[24] == 1'b0) && (SumB22_cast[23:22] != 2'b00) ? 23'sb01111111111111111111111 :
              ((SumB22_cast[24] == 1'b1) && (SumB22_cast[23:22] != 2'b11) ? 23'sb10000000000000000000000 :
              $signed(SumB22_cast[22:0])));


  assign SumB32_add_cast = {{2{SumB22_out1[22]}}, {SumB22_out1, 1'b0}};
  assign SumB32_add_cast_1 = {SumB32_add_cast[25], SumB32_add_cast};
  assign SumB32_add_cast_2 = ((Delay22_out1[27] == 1'b0) && (Delay22_out1[26:2] == 25'b1111111111111111111111111) ? 26'sb01111111111111111111111111 :
              Delay22_out1[27:2] + $signed({1'b0, Delay22_out1[1]}));
  assign SumB32_add_cast_3 = {SumB32_add_cast_2[25], SumB32_add_cast_2};
  assign SumB32_add_temp = SumB32_add_cast_1 + SumB32_add_cast_3;
  assign SumB32_cast = ((SumB32_add_temp[26] == 1'b0) && (SumB32_add_temp[25] != 1'b0) ? 26'sb01111111111111111111111111 :
              ((SumB32_add_temp[26] == 1'b1) && (SumB32_add_temp[25] != 1'b1) ? 26'sb10000000000000000000000000 :
              $signed(SumB32_add_temp[25:0])));
  assign SumB32_out1 = ((SumB32_cast[25] == 1'b0) && (SumB32_cast[24:1] == 24'b111111111111111111111111) ? 25'sb0111111111111111111111111 :
              SumB32_cast[25:1] + $signed({1'b0, SumB32_cast[0]}));


  assign s_3_mul_temp = 18'sb000100101110101111 * SumB32_out1;
  assign s_3_cast = s_3_mul_temp[41:0];
  assign s_3_out1 = (((s_3_cast[41] == 1'b0) && (s_3_cast[40:38] != 3'b000)) || ((s_3_cast[41] == 1'b0) && (s_3_cast[38:13] == 26'sb01111111111111111111111111)) ? 26'sb01111111111111111111111111 :
              ((s_3_cast[41] == 1'b1) && (s_3_cast[40:38] != 3'b111) ? 26'sb10000000000000000000000000 :
              s_3_cast[38:13] + $signed({1'b0, s_3_cast[12]})));


  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (clk_enable) begin
          Delay13_out1 <= SumA23_out1;
        end
      end
    end


  assign a_2_3_mul_temp = 20'sb01101110111010111111 * Delay13_out1;
  assign a_2_3_cast = a_2_3_mul_temp[43:0];
  assign a_2_3_out1 = ((a_2_3_cast[43] == 1'b0) && (a_2_3_cast[42:18] == 25'b1111111111111111111111111) ? 26'sb01111111111111111111111111 :
              a_2_3_cast[43:18] + $signed({1'b0, a_2_3_cast[17]}));


  assign SumA23_sub_cast = ({s_3_out1[25], s_3_out1[25:1]}) + $signed({1'b0, s_3_out1[0]});
  assign SumA23_sub_cast_1 = {SumA23_sub_cast[25], SumA23_sub_cast};
  assign SumA23_sub_cast_2 = {a_2_3_out1[25], a_2_3_out1};
  assign SumA23_sub_temp = SumA23_sub_cast_1 - SumA23_sub_cast_2;
  assign SumA23_cast = ((SumA23_sub_temp[26] == 1'b0) && (SumA23_sub_temp[25] != 1'b0) ? 26'sb01111111111111111111111111 :
              ((SumA23_sub_temp[26] == 1'b1) && (SumA23_sub_temp[25] != 1'b1) ? 26'sb10000000000000000000000000 :
              $signed(SumA23_sub_temp[25:0])));
  assign SumA23_out1 = ((SumA23_cast[25] == 1'b0) && (SumA23_cast[24:1] == 24'b111111111111111111111111) ? 25'sb0111111111111111111111111 :
              SumA23_cast[25:1] + $signed({1'b0, SumA23_cast[0]}));


  assign SumB23_sub_cast = ({SumA23_out1[24], SumA23_out1[24:1]}) + $signed({1'b0, SumA23_out1[0]});
  assign SumB23_sub_cast_1 = ({Delay13_out1[24], Delay13_out1[24:1]}) + $signed({1'b0, Delay13_out1[0]});
  assign SumB23_sub_temp = SumB23_sub_cast - SumB23_sub_cast_1;
  assign SumB23_out1 = ((SumB23_sub_temp[24] == 1'b0) && (SumB23_sub_temp[23:10] == 14'b11111111111111) ? 15'sb011111111111111 :
              SumB23_sub_temp[24:10] + $signed({1'b0, SumB23_sub_temp[9]}));

  assign Output_rsvd = SumB23_out;

endmodule  // Elliptic

